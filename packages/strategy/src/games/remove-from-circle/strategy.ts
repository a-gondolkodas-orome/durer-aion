import { State } from 'boardgame.io';
import { GameStateMixin, RemoveFromCircleGameState } from 'game';


const strategy = [[[], [], [], [4, 5], [], [], [3, 4], [4], [], [], [], [4, 5], [2, 3], [2, 3], [3], [2, 5], [], [], [], [4, 5], [], [], [3, 4], [4], [1, 2], [1, 2], [1, 2], [1, 2, 4, 5], [2], [2], [1, 4], [1, 3, 5], [], [], [], [4, 5], [], [], [3, 4], [4], [], [], [], [4, 5], [2, 3], [2, 3], [3], [2, 5], [0, 1], [0, 1], [0, 1], [0, 1, 4, 5], [0, 1], [0, 1], [0, 1, 3, 4], [3, 5], [1], [1], [1], [0, 2], [0, 3], [0, 3], [0, 2, 4], [1, 4]],
                  [[], [], [], [5, 6], [], [], [4, 5], [5], [], [], [], [5, 6], [3, 4], [3, 4], [4], [3, 6], [], [], [], [5, 6], [], [], [4, 5], [5], [2, 3], [2, 3], [2, 3], [2, 3, 5, 6], [3], [3], [2, 5], [2, 4, 6], [], [], [], [5, 6], [], [], [4, 5], [5], [], [], [], [5, 6], [3, 4], [3, 4], [4], [3, 6], [1, 2], [1, 2], [1, 2], [1, 2, 5, 6], [1, 2], [1, 2], [1, 2, 4, 5], [4, 6], [2], [2], [2], [1, 3], [1, 4], [1, 4], [1, 3, 5], [2, 5], [], [], [], [5, 6], [], [], [4, 5], [5], [], [], [], [5, 6], [3, 4], [3, 4], [4], [3, 6], [], [], [], [5, 6], [], [], [4, 5], [5], [2, 3], [2, 3], [2, 3], [2, 3, 5, 6], [3], [3], [2, 5], [2, 4, 6], [0, 1], [0, 1], [0, 1], [0, 1, 5, 6], [0, 1], [0, 1], [0, 1, 4, 5], [4, 6], [0, 1], [0, 1], [0, 1], [0, 1, 5, 6], [0, 1, 3, 4], [0, 1, 3, 4], [3, 5], [0, 1, 4, 5], [1], [1], [1], [0, 2], [1], [1], [0, 2], [0, 1, 2, 4, 5, 6], [0, 3], [0, 3], [0, 3], [1, 2, 5, 6], [0, 2, 4], [0, 2, 4], [1, 4], [3]],
                  [[], [], [], [6, 7], [], [], [5, 6], [6], [], [], [], [6, 7], [4, 5], [4, 5], [5], [4, 7], [], [], [], [6, 7], [], [], [5, 6], [6], [3, 4], [3, 4], [3, 4], [3, 4, 6, 7], [4], [4], [3, 6], [3, 5, 7], [], [], [], [6, 7], [], [], [5, 6], [6], [], [], [], [6, 7], [4, 5], [4, 5], [5], [4, 7], [2, 3], [2, 3], [2, 3], [2, 3, 6, 7], [2, 3], [2, 3], [2, 3, 5, 6], [5, 7], [3], [3], [3], [2, 4], [2, 5], [2, 5], [2, 4, 6], [3, 6], [], [], [], [6, 7], [], [], [5, 6], [6], [], [], [], [6, 7], [4, 5], [4, 5], [5], [4, 7], [], [], [], [6, 7], [], [], [5, 6], [6], [3, 4], [3, 4], [3, 4], [3, 4, 6, 7], [4], [4], [3, 6], [3, 5, 7], [1, 2], [1, 2], [1, 2], [1, 2, 6, 7], [1, 2], [1, 2], [1, 2, 5, 6], [5, 7], [1, 2], [1, 2], [1, 2], [1, 2, 6, 7], [1, 2, 4, 5], [1, 2, 4, 5], [4, 6], [1, 2, 5, 6], [2], [2], [2], [1, 3], [2], [2], [1, 3], [1, 2, 3, 5, 6, 7], [1, 4], [1, 4], [1, 4], [2, 3, 6, 7], [1, 3, 5], [1, 3, 5], [2, 5], [4], [], [], [], [6, 7], [], [], [5, 6], [6], [], [], [], [6, 7], [4, 5], [4, 5], [5], [4, 7], [], [], [], [6, 7], [], [], [5, 6], [6], [3, 4], [3, 4], [3, 4], [3, 4, 6, 7], [4], [4], [3, 6], [3, 5, 7], [], [], [], [6, 7], [], [], [5, 6], [6], [], [], [], [6, 7], [4, 5], [4, 5], [5], [4, 7], [2, 3], [2, 3], [2, 3], [2, 3, 6, 7], [2, 3], [2, 3], [2, 3, 5, 6], [5, 7], [3], [3], [3], [2, 4], [2, 5], [2, 5], [2, 4, 6], [3, 6], [0, 1], [0, 1], [0, 1], [0, 1, 6, 7], [0, 1], [0, 1], [0, 1, 5, 6], [5, 7], [0, 1], [0, 1], [0, 1], [0, 1, 6, 7], [0, 1, 4, 5], [0, 1, 4, 5], [4, 6], [0, 1, 5, 6], [0, 1], [0, 1], [0, 1], [0, 1, 6, 7], [0, 1], [0, 1], [0, 1, 5, 6], [5, 7], [0, 1, 3, 4], [0, 1, 3, 4], [0, 1, 3, 4], [0, 1, 3, 4, 6, 7], [3, 5], [3, 5], [0, 1, 4, 5], [0, 1, 3, 4, 6, 7], [1], [1], [1], [0, 2], [1], [1], [0, 2], [0, 1, 2, 5, 6, 7], [1], [1], [1], [0, 2], [0, 2], [0, 2], [0, 1, 2, 4, 5, 6], [1, 4, 7], [0, 3], [0, 3], [0, 3], [1, 2, 6, 7], [0, 3], [0, 3], [1, 2, 5, 6], [0, 3, 6], [0, 2, 4], [0, 2, 4], [0, 2, 4], [0, 1, 3, 4, 6, 7], [1, 4], [1, 4], [3], [2, 5]],
                  [[], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [4, 5], [4, 5], [4, 5], [4, 5, 7, 8], [5], [5], [4, 7], [4, 6, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [3, 4], [3, 4], [3, 4], [3, 4, 7, 8], [3, 4], [3, 4], [3, 4, 6, 7], [6, 8], [4], [4], [4], [3, 5], [3, 6], [3, 6], [3, 5, 7], [4, 7], [], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [4, 5], [4, 5], [4, 5], [4, 5, 7, 8], [5], [5], [4, 7], [4, 6, 8], [2, 3], [2, 3], [2, 3], [2, 3, 7, 8], [2, 3], [2, 3], [2, 3, 6, 7], [6, 8], [2, 3], [2, 3], [2, 3], [2, 3, 7, 8], [2, 3, 5, 6], [2, 3, 5, 6], [5, 7], [2, 3, 6, 7], [3], [3], [3], [2, 4], [3], [3], [2, 4], [2, 3, 4, 6, 7, 8], [2, 5], [2, 5], [2, 5], [3, 4, 7, 8], [2, 4, 6], [2, 4, 6], [3, 6], [5], [], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [4, 5], [4, 5], [4, 5], [4, 5, 7, 8], [5], [5], [4, 7], [4, 6, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [3, 4], [3, 4], [3, 4], [3, 4, 7, 8], [3, 4], [3, 4], [3, 4, 6, 7], [6, 8], [4], [4], [4], [3, 5], [3, 6], [3, 6], [3, 5, 7], [4, 7], [1, 2], [1, 2], [1, 2], [1, 2, 7, 8], [1, 2], [1, 2], [1, 2, 6, 7], [6, 8], [1, 2], [1, 2], [1, 2], [1, 2, 7, 8], [1, 2, 5, 6], [1, 2, 5, 6], [5, 7], [1, 2, 6, 7], [1, 2], [1, 2], [1, 2], [1, 2, 7, 8], [1, 2], [1, 2], [1, 2, 6, 7], [6, 8], [1, 2, 4, 5], [1, 2, 4, 5], [1, 2, 4, 5], [1, 2, 4, 5, 7, 8], [4, 6], [4, 6], [1, 2, 5, 6], [1, 2, 4, 5, 7, 8], [2], [2], [2], [1, 3], [2], [2], [1, 3], [1, 2, 3, 6, 7, 8], [2], [2], [2], [1, 3], [1, 3], [1, 3], [1, 2, 3, 5, 6, 7], [2, 5, 8], [1, 4], [1, 4], [1, 4], [2, 3, 7, 8], [1, 4], [1, 4], [2, 3, 6, 7], [1, 4, 7], [1, 3, 5], [1, 3, 5], [1, 3, 5], [1, 2, 4, 5, 7, 8], [2, 5], [2, 5], [4], [3, 6], [], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [4, 5], [4, 5], [4, 5], [4, 5, 7, 8], [5], [5], [4, 7], [4, 6, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [3, 4], [3, 4], [3, 4], [3, 4, 7, 8], [3, 4], [3, 4], [3, 4, 6, 7], [6, 8], [4], [4], [4], [3, 5], [3, 6], [3, 6], [3, 5, 7], [4, 7], [], [], [], [7, 8], [], [], [6, 7], [7], [], [], [], [7, 8], [5, 6], [5, 6], [6], [5, 8], [], [], [], [7, 8], [], [], [6, 7], [7], [4, 5], [4, 5], [4, 5], [4, 5, 7, 8], [5], [5], [4, 7], [4, 6, 8], [2, 3], [2, 3], [2, 3], [2, 3, 7, 8], [2, 3], [2, 3], [2, 3, 6, 7], [6, 8], [2, 3], [2, 3], [2, 3], [2, 3, 7, 8], [2, 3, 5, 6], [2, 3, 5, 6], [5, 7], [2, 3, 6, 7], [3], [3], [3], [2, 4], [3], [3], [2, 4], [2, 3, 4, 6, 7, 8], [2, 5], [2, 5], [2, 5], [3, 4, 7, 8], [2, 4, 6], [2, 4, 6], [3, 6], [5], [0, 1], [0, 1], [0, 1], [0, 1, 7, 8], [0, 1], [0, 1], [0, 1, 6, 7], [6, 8], [0, 1], [0, 1], [0, 1], [0, 1, 7, 8], [0, 1, 5, 6], [0, 1, 5, 6], [5, 7], [0, 1, 6, 7], [0, 1], [0, 1], [0, 1], [0, 1, 7, 8], [0, 1], [0, 1], [0, 1, 6, 7], [6, 8], [0, 1, 4, 5], [0, 1, 4, 5], [0, 1, 4, 5], [0, 1, 4, 5, 7, 8], [4, 6], [4, 6], [0, 1, 5, 6], [0, 1, 4, 5, 7, 8], [0, 1], [0, 1], [0, 1], [0, 1, 7, 8], [0, 1], [0, 1], [0, 1, 6, 7], [6, 8], [0, 1], [0, 1], [0, 1], [0, 1, 7, 8], [0, 1, 5, 6], [0, 1, 5, 6], [5, 7], [0, 1, 6, 7], [0, 1, 3, 4], [0, 1, 3, 4], [0, 1, 3, 4], [0, 1, 3, 4, 7, 8], [0, 1, 3, 4], [0, 1, 3, 4], [0, 1, 3, 4, 6, 7], [7], [3, 5], [3, 5], [3, 5], [4], [0, 1, 4, 5], [0, 1, 4, 5], [0, 1, 3, 4, 6, 7], [3, 8], [1], [1], [1], [0, 2], [1], [1], [0, 2], [0, 1, 2, 6, 7, 8], [1], [1], [1], [0, 2], [0, 2], [0, 2], [0, 1, 2, 5, 6, 7], [1, 5, 8], [1], [1], [1], [0, 2], [1], [1], [0, 2], [0, 1, 2, 6, 7, 8], [0, 2], [0, 2], [0, 2], [1], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 6], [1, 4, 7], [0, 2, 5, 7], [0, 3], [0, 3], [0, 3], [1, 2, 7, 8], [0, 3], [0, 3], [1, 2, 6, 7], [0, 3, 7], [0, 3], [0, 3], [0, 3], [1, 2, 7, 8], [1, 2, 5, 6], [1, 2, 5, 6], [0, 3, 6], [0, 1, 2, 3, 5, 6, 7, 8], [0, 2, 4], [0, 2, 4], [0, 2, 4], [0, 1, 3, 4, 7, 8], [0, 2, 4], [0, 2, 4], [0, 1, 3, 4, 6, 7], [1, 3, 6, 8], [1, 4], [1, 4], [1, 4], [0, 5], [3], [3], [2, 5], [4]]];

function convertToBinary(L: Array<boolean>) {
  let index = 0;
  for(let i = 0; i < L.length; i++) {
    index = index + (L[i] ? 2**(L.length - i - 1) : 0 );
  }
  return index;
}

function possibleMoves(G: RemoveFromCircleGameState) {
  let moves = [];
  if ((G.circle[1] || G.circle[G.circle.length-1]) && G.circle[0]) {
    moves.push({move: 'removePoint', args: [0]});
  }
  for (let i = 1; i<G.circle.length-1; i++) {
    if ((G.circle[i-1] || G.circle[i+1]) && G.circle[i]) {
      moves.push({move: 'removePoint', args: [i]});
    }
  }  
  if ((G.circle[0] || G.circle[G.circle.length-2]) && G.circle[G.circle.length-1]) {
    moves.push({move: 'removePoint', args: [G.circle.length-1]});
  }
  return moves;
}

export function strategyWrapper(category: "C" | "D" | "E") {
  return (state: State<RemoveFromCircleGameState & GameStateMixin>, botID: string): [number | { circle: Array<boolean> } | undefined, string] => {
    if (state.ctx.phase === "startNewGame") {
      return [startingPosition({ G: state.G, ctx: state.ctx }, category), "setStartingPosition"];
    }

    if (state.G.difficulty === "test") {
      return randomStrategy(state.G);
    } else {
      return winningStrategy(state.G);
    }
  }
}

function startingPosition({ G, ctx }: any, category: "C" | "D" | "E"): { circle: Array<boolean>, firstMove: number, lastMove: number} {
  if (category === "C") {
    // C Category
    return { circle: Array(7).fill(true), firstMove:-1, lastMove:-1};
  }
  if (category === "D") {
    // D Category
    return { circle: Array(9).fill(true), firstMove:-1, lastMove:-1};
  }
  if (category === "E") {
    // E Category
    if (G.difficulty === "live") {
      let NoL = G.numberOfLoss;
      let WS = G.winningStreak;
      if (NoL === 0 && WS === 0) {
        return { circle: Array(9).fill(true), firstMove:-1, lastMove:-1};
      } else if (NoL === 0 && WS === 1) {
        return { circle: Array(10).fill(true), firstMove:-1, lastMove:-1};
      } else if (NoL === 1 && WS === 0) {
        return { circle: Array(8).fill(true), firstMove:-1, lastMove:-1};
      } else if (NoL === 1 && WS === 1) {
        return { circle: Array(9).fill(true), firstMove:-1, lastMove:-1};
      } else if (NoL === 2 && WS === 0) {
        return { circle: Array(7).fill(true), firstMove:-1, lastMove:-1};
      } else if (NoL === 2 && WS === 1) {
        return { circle: Array(10).fill(true), firstMove:-1, lastMove:-1};
      } else {
        return { circle: Array(
          8 + Math.floor(Math.random()*2)*2 - G.numberOfTries%2
        ).fill(true), firstMove:-1, lastMove:-1};
      }
    } else {
      return { circle: Array(Math.floor(Math.random()*8+3)).fill(true), firstMove:-1, lastMove:-1};
    }
  }
  //just in case
  return {circle: Array(7).fill(true), firstMove:-1, lastMove:-1};
}

function randomStrategy(G: RemoveFromCircleGameState): [number, string] {
  let pMoves =  possibleMoves(G);
  let i = Math.floor(Math.random()*pMoves.length);
  return [pMoves[i].args[0], pMoves[i].move];
}

function winningStrategy(G: RemoveFromCircleGameState): [number, string] {
  let move = 0;
  if (G.firstMove === -1) {
    move = Math.floor(Math.random()*G.circle.length)
  } else {
    let pMoves = strategy[G.circle.length-7][convertToBinary(G.circle)];
    let i = Math.floor(Math.random()*pMoves.length);
    move = pMoves[i] + 1;
  }
  return [move, "removePoint"];
}